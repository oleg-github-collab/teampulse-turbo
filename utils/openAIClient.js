import OpenAI from 'openai';
import logger from './logger.js';

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ GPT-5 —á–µ—Ä–µ–∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π SDK
const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  timeout: 120000, // 2 —Ö–≤–∏–ª–∏–Ω–∏ –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
  maxRetries: 3
});

/**
 * –°—Ç–≤–æ—Ä—é—î —ñ–Ω—Å—Ç–∞–Ω—Å GPT-5 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
 * @param {string} prompt - —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É
 * @returns {Promise<string>} - –≤—ñ–¥–ø–æ–≤—ñ–¥—å GPT-5
 */
const askGPT5 = async (prompt) => {
  try {
    logger.info('ü§ñ GPT-5 Request initiated', { 
      promptLength: prompt?.length,
      timestamp: new Date().toISOString()
    });

    const response = await client.responses.create({
      model: "gpt-5",
      input: prompt,
    });

    logger.info('‚úÖ GPT-5 Response received', {
      outputLength: response.output_text?.length,
      success: true
    });

    return response.output_text;

  } catch (error) {
    logger.error("‚ùå Kaminskyi AI Error:", {
      error: error.message,
      stack: error.stack,
      prompt: prompt?.substring(0, 100) + '...'
    });
    
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Kaminskyi AI.");
  }
};

/**
 * –°—Ç–≤–æ—Ä—é—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ GPT-5 –∑ —Å–∏—Å—Ç–µ–º–Ω–∏–º —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
 * @param {string} systemPrompt - —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
 * @param {string} userPrompt - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –ø—Ä–æ–º–ø—Ç
 * @returns {Promise<string>} - –≤—ñ–¥–ø–æ–≤—ñ–¥—å GPT-5
 */
const askGPT5WithSystem = async (systemPrompt, userPrompt) => {
  const combinedPrompt = `System: ${systemPrompt}\n\nUser: ${userPrompt}`;
  return await askGPT5(combinedPrompt);
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ GPT-5
 * @returns {Promise<boolean>} - —Å—Ç–∞—Ç—É—Å –∑'—î–¥–Ω–∞–Ω–Ω—è
 */
const testGPT5Connection = async () => {
  try {
    await askGPT5("Test connection");
    logger.info('üü¢ GPT-5 connection test successful');
    return true;
  } catch (error) {
    logger.error('üî¥ GPT-5 connection test failed:', error.message);
    return false;
  }
};

// ESM export
export { 
  askGPT5, 
  askGPT5WithSystem,
  testGPT5Connection 
};

// Default export –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
export default { 
  askGPT5, 
  askGPT5WithSystem,
  testGPT5Connection 
};