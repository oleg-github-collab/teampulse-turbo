import OpenAI from 'openai';
import logger from './logger.js';

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ OpenAI —á–µ—Ä–µ–∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π SDK
const client = process.env.OPENAI_API_KEY ? new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  timeout: 120000, // 2 —Ö–≤–∏–ª–∏–Ω–∏ –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
  maxRetries: 3
}) : null;

/**
 * –°—Ç–≤–æ—Ä—é—î –∑–∞–ø–∏—Ç –¥–æ OpenAI GPT
 * @param {string} systemPrompt - —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
 * @param {string} userPrompt - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –ø—Ä–æ–º–ø—Ç
 * @param {boolean} stream - —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–æ—Ç–æ–∫–æ–≤–∏–π —Ä–µ–∂–∏–º
 * @returns {Promise<string|ReadableStream>} - –≤—ñ–¥–ø–æ–≤—ñ–¥—å GPT
 */
const askGPT = async (systemPrompt, userPrompt, stream = false) => {
  try {
    if (!client) {
      throw new Error("OpenAI API key –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π");
    }

    logger.info('ü§ñ OpenAI Request initiated', { 
      systemPromptLength: systemPrompt?.length,
      userPromptLength: userPrompt?.length,
      stream,
      timestamp: new Date().toISOString()
    });

    const response = await client.chat.completions.create({
      model: "gpt-4",
      temperature: 0.2,
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      stream: stream
    });

    if (stream) {
      return response;
    }

    const content = response.choices[0]?.message?.content || "";
    
    logger.info('‚úÖ OpenAI Response received', {
      outputLength: content.length,
      success: true
    });

    return content;

  } catch (error) {
    logger.error("‚ùå OpenAI Error:", {
      error: error.message,
      stack: error.stack,
      systemPrompt: systemPrompt?.substring(0, 100) + '...',
      userPrompt: userPrompt?.substring(0, 100) + '...'
    });
    
    throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI: ${error.message}`);
  }
};

/**
 * –°—Ç–≤–æ—Ä—é—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ GPT –∑ –ø—Ä–æ—Å—Ç–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
 * @param {string} prompt - —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É
 * @returns {Promise<string>} - –≤—ñ–¥–ø–æ–≤—ñ–¥—å GPT
 */
const askGPTSimple = async (prompt) => {
  return await askGPT("–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç.", prompt, false);
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ OpenAI
 * @returns {Promise<boolean>} - —Å—Ç–∞—Ç—É—Å –∑'—î–¥–Ω–∞–Ω–Ω—è
 */
const testOpenAIConnection = async () => {
  try {
    if (!client) {
      logger.error('üî¥ OpenAI client not initialized - missing API key');
      return false;
    }
    
    await askGPTSimple("Test connection - reply with 'OK'");
    logger.info('üü¢ OpenAI connection test successful');
    return true;
  } catch (error) {
    logger.error('üî¥ OpenAI connection test failed:', error.message);
    return false;
  }
};

// ESM export
export { 
  askGPT, 
  askGPTSimple,
  testOpenAIConnection,
  client
};

// Default export –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
export default { 
  askGPT, 
  askGPTSimple,
  testOpenAIConnection,
  client
};