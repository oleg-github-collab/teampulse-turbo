import logger from './logger.js';

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
const ENV_CONFIG = {
  required: [
    'OPENAI_API_KEY'
  ],
  optional: [
    'PORT',
    'NODE_ENV',
    'LOG_LEVEL',
    'ALLOWED_ORIGINS',
    'SESSION_SECRET',
    'JWT_SECRET'
  ],
  defaults: {
    PORT: '3000',
    NODE_ENV: 'development',
    LOG_LEVEL: 'info',
    SESSION_SECRET: 'default-session-secret-change-in-production',
    JWT_SECRET: 'default-jwt-secret-change-in-production'
  }
};

// –í–∞–ª—ñ–¥–∞—Ç–æ—Ä–∏ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
const validators = {
  OPENAI_API_KEY: (value) => {
    if (!value) return 'OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
    if (!value.startsWith('sk-') && !value.startsWith('sk-proj-')) {
      return '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç OPENAI_API_KEY (–ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ sk-)';
    }
    if (value.length < 20) {
      return 'OPENAI_API_KEY –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π';
    }
    return null;
  },
  
  PORT: (value) => {
    if (!value) return null;
    const port = parseInt(value);
    if (isNaN(port) || port < 1 || port > 65535) {
      return 'PORT –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º –º—ñ–∂ 1 —Ç–∞ 65535';
    }
    return null;
  },
  
  NODE_ENV: (value) => {
    if (!value) return null;
    const validEnvs = ['development', 'production', 'test'];
    if (!validEnvs.includes(value)) {
      return `NODE_ENV –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ–¥–Ω–∏–º –∑: ${validEnvs.join(', ')}`;
    }
    return null;
  },
  
  LOG_LEVEL: (value) => {
    if (!value) return null;
    const validLevels = ['error', 'warn', 'info', 'debug', 'verbose'];
    if (!validLevels.includes(value)) {
      return `LOG_LEVEL –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ–¥–Ω–∏–º –∑: ${validLevels.join(', ')}`;
    }
    return null;
  },
  
  ALLOWED_ORIGINS: (value) => {
    if (!value) return null;
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –≤–∞–ª—ñ–¥–Ω—ñ URL –∞–±–æ –¥–æ–º–µ–Ω–∏
    const origins = value.split(',').map(o => o.trim());
    for (const origin of origins) {
      if (origin !== '*' && !origin.match(/^https?:\/\/.+/) && !origin.match(/^[a-zA-Z0-9.-]+$/)) {
        return `–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π ALLOWED_ORIGINS: ${origin}`;
      }
    }
    return null;
  }
};

function validateEnv() {
  console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è...');
  
  const errors = [];
  const warnings = [];
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
  ENV_CONFIG.required.forEach(key => {
    const value = process.env[key];
    
    if (!value) {
      errors.push(`‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞: ${key}`);
      return;
    }
    
    // –ó–∞–ø—É—Å–∫ –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä–∞ —è–∫—â–æ —î
    if (validators[key]) {
      const error = validators[key](value);
      if (error) {
        errors.push(`‚ùå ${error}`);
      }
    }
  });
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
  ENV_CONFIG.optional.forEach(key => {
    const value = process.env[key];
    
    if (value && validators[key]) {
      const error = validators[key](value);
      if (error) {
        errors.push(`‚ùå ${error}`);
      }
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    if (!value && ENV_CONFIG.defaults[key]) {
      process.env[key] = ENV_CONFIG.defaults[key];
      warnings.push(`‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è ${key}: ${ENV_CONFIG.defaults[key]}`);
    }
  });
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ production –±–µ–∑–ø–µ–∫–∏
  if (process.env.NODE_ENV === 'production') {
    if (process.env.SESSION_SECRET === ENV_CONFIG.defaults.SESSION_SECRET) {
      warnings.push('‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è SESSION_SECRET –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤ production!');
    }
    
    if (process.env.JWT_SECRET === ENV_CONFIG.defaults.JWT_SECRET) {
      warnings.push('‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è JWT_SECRET –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤ production!');
    }
    
    if (!process.env.ALLOWED_ORIGINS) {
      warnings.push('‚ö†Ô∏è ALLOWED_ORIGINS –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è production');
    }
  }
  
  // –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  if (warnings.length > 0) {
    warnings.forEach(warning => console.warn(warning));
  }
  
  if (errors.length > 0) {
    console.error('\nüí• –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è:');
    errors.forEach(error => console.error(error));
    console.error('\nüìã –ü—Ä–∏–∫–ª–∞–¥ .env —Ñ–∞–π–ª—É:');
    console.error('OPENAI_API_KEY=sk-your-key-here');
    console.error('NODE_ENV=development');
    console.error('PORT=3000');
    console.error('LOG_LEVEL=info');
    console.error('ALLOWED_ORIGINS=http://localhost:3000,https://yourdomain.com');
    console.error('SESSION_SECRET=your-secret-session-key');
    console.error('JWT_SECRET=your-secret-jwt-key');
    process.exit(1);
  }
  
  // –£—Å–ø—ñ—à–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
  console.log('‚úÖ –í—Å—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω—ñ');
  console.log(`üåç –†–µ–∂–∏–º: ${process.env.NODE_ENV}`);
  console.log(`üîë OpenAI –∫–ª—é—á: ${process.env.OPENAI_API_KEY.substring(0, 10)}...`);
  
  // –õ–æ–≥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ winston —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
  if (logger) {
    logger.info('Environment validation completed', {
      nodeEnv: process.env.NODE_ENV,
      port: process.env.PORT,
      logLevel: process.env.LOG_LEVEL,
      hasApiKey: !!process.env.OPENAI_API_KEY,
      warningsCount: warnings.length
    });
  }
  
  return true;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (–∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è –¥–µ–±–∞–≥—É)
export const getEnvConfig = () => ({
  required: ENV_CONFIG.required,
  optional: ENV_CONFIG.optional,
  current: Object.fromEntries(
    [...ENV_CONFIG.required, ...ENV_CONFIG.optional]
      .map(key => [key, process.env[key] ? '***SET***' : 'NOT_SET'])
  )
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è env (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç—ñ–≤)
export const getSafeEnv = () => {
  const safeKeys = ['NODE_ENV', 'PORT', 'LOG_LEVEL'];
  return Object.fromEntries(
    safeKeys.map(key => [key, process.env[key]])
  );
};

export default validateEnv;